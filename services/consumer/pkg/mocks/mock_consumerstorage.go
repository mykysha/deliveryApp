// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/consumerservice/consumerstorage.go

// Package mock_consumerservice is a generated GoMock package.
package mock_consumerservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/nndergunov/deliveryApp/services/consumer/pkg/domain"
)

// MockConsumerStorage is a mock of ConsumerStorage interface.
type MockConsumerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerStorageMockRecorder
}

// MockConsumerStorageMockRecorder is the mock recorder for MockConsumerStorage.
type MockConsumerStorageMockRecorder struct {
	mock *MockConsumerStorage
}

// NewMockConsumerStorage creates a new mock instance.
func NewMockConsumerStorage(ctrl *gomock.Controller) *MockConsumerStorage {
	mock := &MockConsumerStorage{ctrl: ctrl}
	mock.recorder = &MockConsumerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerStorage) EXPECT() *MockConsumerStorageMockRecorder {
	return m.recorder
}

// CleanConsumerTable mocks base method.
func (m *MockConsumerStorage) CleanConsumerTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanConsumerTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanConsumerTable indicates an expected call of CleanConsumerTable.
func (mr *MockConsumerStorageMockRecorder) CleanConsumerTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanConsumerTable", reflect.TypeOf((*MockConsumerStorage)(nil).CleanConsumerTable))
}

// DeleteConsumer mocks base method.
func (m *MockConsumerStorage) DeleteConsumer(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConsumer", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConsumer indicates an expected call of DeleteConsumer.
func (mr *MockConsumerStorageMockRecorder) DeleteConsumer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConsumer", reflect.TypeOf((*MockConsumerStorage)(nil).DeleteConsumer), id)
}

// DeleteLocation mocks base method.
func (m *MockConsumerStorage) DeleteLocation(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocation", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLocation indicates an expected call of DeleteLocation.
func (mr *MockConsumerStorageMockRecorder) DeleteLocation(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocation", reflect.TypeOf((*MockConsumerStorage)(nil).DeleteLocation), userID)
}

// GetAllConsumer mocks base method.
func (m *MockConsumerStorage) GetAllConsumer() ([]domain.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllConsumer")
	ret0, _ := ret[0].([]domain.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllConsumer indicates an expected call of GetAllConsumer.
func (mr *MockConsumerStorageMockRecorder) GetAllConsumer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllConsumer", reflect.TypeOf((*MockConsumerStorage)(nil).GetAllConsumer))
}

// GetConsumerByID mocks base method.
func (m *MockConsumerStorage) GetConsumerByID(id int) (*domain.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerByID", id)
	ret0, _ := ret[0].(*domain.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumerByID indicates an expected call of GetConsumerByID.
func (mr *MockConsumerStorageMockRecorder) GetConsumerByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerByID", reflect.TypeOf((*MockConsumerStorage)(nil).GetConsumerByID), id)
}

// GetConsumerDuplicateByParam mocks base method.
func (m *MockConsumerStorage) GetConsumerDuplicateByParam(param domain.SearchParam) (*domain.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerDuplicateByParam", param)
	ret0, _ := ret[0].(*domain.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumerDuplicateByParam indicates an expected call of GetConsumerDuplicateByParam.
func (mr *MockConsumerStorageMockRecorder) GetConsumerDuplicateByParam(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerDuplicateByParam", reflect.TypeOf((*MockConsumerStorage)(nil).GetConsumerDuplicateByParam), param)
}

// GetLocation mocks base method.
func (m *MockConsumerStorage) GetLocation(userID int) (*domain.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", userID)
	ret0, _ := ret[0].(*domain.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockConsumerStorageMockRecorder) GetLocation(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockConsumerStorage)(nil).GetLocation), userID)
}

// InsertConsumer mocks base method.
func (m *MockConsumerStorage) InsertConsumer(consumer domain.Consumer) (*domain.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertConsumer", consumer)
	ret0, _ := ret[0].(*domain.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertConsumer indicates an expected call of InsertConsumer.
func (mr *MockConsumerStorageMockRecorder) InsertConsumer(consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertConsumer", reflect.TypeOf((*MockConsumerStorage)(nil).InsertConsumer), consumer)
}

// InsertLocation mocks base method.
func (m *MockConsumerStorage) InsertLocation(location domain.Location) (*domain.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLocation", location)
	ret0, _ := ret[0].(*domain.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLocation indicates an expected call of InsertLocation.
func (mr *MockConsumerStorageMockRecorder) InsertLocation(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLocation", reflect.TypeOf((*MockConsumerStorage)(nil).InsertLocation), location)
}

// UpdateConsumer mocks base method.
func (m *MockConsumerStorage) UpdateConsumer(consumer domain.Consumer) (*domain.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConsumer", consumer)
	ret0, _ := ret[0].(*domain.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConsumer indicates an expected call of UpdateConsumer.
func (mr *MockConsumerStorageMockRecorder) UpdateConsumer(consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConsumer", reflect.TypeOf((*MockConsumerStorage)(nil).UpdateConsumer), consumer)
}

// UpdateLocation mocks base method.
func (m *MockConsumerStorage) UpdateLocation(location domain.Location) (*domain.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocation", location)
	ret0, _ := ret[0].(*domain.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocation indicates an expected call of UpdateLocation.
func (mr *MockConsumerStorageMockRecorder) UpdateLocation(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockConsumerStorage)(nil).UpdateLocation), location)
}
