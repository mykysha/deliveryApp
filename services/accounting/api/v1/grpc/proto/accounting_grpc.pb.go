// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: proto/accounting.proto

package accounting_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountingClient is the client API for Accounting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountingClient interface {
	// Sends a greeting
	InsertNewAccount(ctx context.Context, in *NewAccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	GetAccountList(ctx context.Context, in *SearchParam, opts ...grpc.CallOption) (*AccountListResponse, error)
	GetAccount(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*AccountResponse, error)
	DeleteAccount(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*AccountDeleteResponse, error)
	InsertTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	DeleteTransaction(ctx context.Context, in *TransactionID, opts ...grpc.CallOption) (*TransactionDeleteResponse, error)
}

type accountingClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountingClient(cc grpc.ClientConnInterface) AccountingClient {
	return &accountingClient{cc}
}

func (c *accountingClient) InsertNewAccount(ctx context.Context, in *NewAccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, "/accounting_proto.Accounting/InsertNewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) GetAccountList(ctx context.Context, in *SearchParam, opts ...grpc.CallOption) (*AccountListResponse, error) {
	out := new(AccountListResponse)
	err := c.cc.Invoke(ctx, "/accounting_proto.Accounting/GetAccountList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) GetAccount(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, "/accounting_proto.Accounting/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) DeleteAccount(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*AccountDeleteResponse, error) {
	out := new(AccountDeleteResponse)
	err := c.cc.Invoke(ctx, "/accounting_proto.Accounting/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) InsertTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/accounting_proto.Accounting/InsertTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) DeleteTransaction(ctx context.Context, in *TransactionID, opts ...grpc.CallOption) (*TransactionDeleteResponse, error) {
	out := new(TransactionDeleteResponse)
	err := c.cc.Invoke(ctx, "/accounting_proto.Accounting/DeleteTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountingServer is the server API for Accounting service.
// All implementations must embed UnimplementedAccountingServer
// for forward compatibility
type AccountingServer interface {
	// Sends a greeting
	InsertNewAccount(context.Context, *NewAccountRequest) (*AccountResponse, error)
	GetAccountList(context.Context, *SearchParam) (*AccountListResponse, error)
	GetAccount(context.Context, *AccountID) (*AccountResponse, error)
	DeleteAccount(context.Context, *AccountID) (*AccountDeleteResponse, error)
	InsertTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	DeleteTransaction(context.Context, *TransactionID) (*TransactionDeleteResponse, error)
	mustEmbedUnimplementedAccountingServer()
}

// UnimplementedAccountingServer must be embedded to have forward compatible implementations.
type UnimplementedAccountingServer struct {
}

func (UnimplementedAccountingServer) InsertNewAccount(context.Context, *NewAccountRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertNewAccount not implemented")
}
func (UnimplementedAccountingServer) GetAccountList(context.Context, *SearchParam) (*AccountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountList not implemented")
}
func (UnimplementedAccountingServer) GetAccount(context.Context, *AccountID) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountingServer) DeleteAccount(context.Context, *AccountID) (*AccountDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAccountingServer) InsertTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTransaction not implemented")
}
func (UnimplementedAccountingServer) DeleteTransaction(context.Context, *TransactionID) (*TransactionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransaction not implemented")
}
func (UnimplementedAccountingServer) mustEmbedUnimplementedAccountingServer() {}

// UnsafeAccountingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountingServer will
// result in compilation errors.
type UnsafeAccountingServer interface {
	mustEmbedUnimplementedAccountingServer()
}

func RegisterAccountingServer(s grpc.ServiceRegistrar, srv AccountingServer) {
	s.RegisterService(&Accounting_ServiceDesc, srv)
}

func _Accounting_InsertNewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).InsertNewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting_proto.Accounting/InsertNewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).InsertNewAccount(ctx, req.(*NewAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_GetAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).GetAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting_proto.Accounting/GetAccountList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).GetAccountList(ctx, req.(*SearchParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting_proto.Accounting/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).GetAccount(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting_proto.Accounting/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).DeleteAccount(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_InsertTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).InsertTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting_proto.Accounting/InsertTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).InsertTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_DeleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).DeleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting_proto.Accounting/DeleteTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).DeleteTransaction(ctx, req.(*TransactionID))
	}
	return interceptor(ctx, in, info, handler)
}

// Accounting_ServiceDesc is the grpc.ServiceDesc for Accounting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Accounting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounting_proto.Accounting",
	HandlerType: (*AccountingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertNewAccount",
			Handler:    _Accounting_InsertNewAccount_Handler,
		},
		{
			MethodName: "GetAccountList",
			Handler:    _Accounting_GetAccountList_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Accounting_GetAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _Accounting_DeleteAccount_Handler,
		},
		{
			MethodName: "InsertTransaction",
			Handler:    _Accounting_InsertTransaction_Handler,
		},
		{
			MethodName: "DeleteTransaction",
			Handler:    _Accounting_DeleteTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/accounting.proto",
}
