// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/accountingservice/consumerstorage.go

// Package mock_accountingservice is a generated GoMock package.
package mock_accountingservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/nndergunov/deliveryApp/services/accounting/pkg/domain"
)

// MockAccountStorage is a mock of AccountStorage interface.
type MockAccountStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAccountStorageMockRecorder
}

// MockAccountStorageMockRecorder is the mock recorder for MockAccountStorage.
type MockAccountStorageMockRecorder struct {
	mock *MockAccountStorage
}

// NewMockAccountStorage creates a new mock instance.
func NewMockAccountStorage(ctrl *gomock.Controller) *MockAccountStorage {
	mock := &MockAccountStorage{ctrl: ctrl}
	mock.recorder = &MockAccountStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountStorage) EXPECT() *MockAccountStorageMockRecorder {
	return m.recorder
}

// AddToAccountBalance mocks base method.
func (m *MockAccountStorage) AddToAccountBalance(tr domain.Transaction) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToAccountBalance", tr)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToAccountBalance indicates an expected call of AddToAccountBalance.
func (mr *MockAccountStorageMockRecorder) AddToAccountBalance(tr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToAccountBalance", reflect.TypeOf((*MockAccountStorage)(nil).AddToAccountBalance), tr)
}

// DeleteAccount mocks base method.
func (m *MockAccountStorage) DeleteAccount(consumerID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", consumerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountStorageMockRecorder) DeleteAccount(consumerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountStorage)(nil).DeleteAccount), consumerID)
}

// DeleteTransaction mocks base method.
func (m *MockAccountStorage) DeleteTransaction(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockAccountStorageMockRecorder) DeleteTransaction(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockAccountStorage)(nil).DeleteTransaction), id)
}

// GetAccountByID mocks base method.
func (m *MockAccountStorage) GetAccountByID(id int) (*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", id)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockAccountStorageMockRecorder) GetAccountByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockAccountStorage)(nil).GetAccountByID), id)
}

// GetAccountListByParam mocks base method.
func (m *MockAccountStorage) GetAccountListByParam(params domain.SearchParam) ([]domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountListByParam", params)
	ret0, _ := ret[0].([]domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountListByParam indicates an expected call of GetAccountListByParam.
func (mr *MockAccountStorageMockRecorder) GetAccountListByParam(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountListByParam", reflect.TypeOf((*MockAccountStorage)(nil).GetAccountListByParam), params)
}

// GetTransactionByID mocks base method.
func (m *MockAccountStorage) GetTransactionByID(id int) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", id)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockAccountStorageMockRecorder) GetTransactionByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockAccountStorage)(nil).GetTransactionByID), id)
}

// InsertNewAccount mocks base method.
func (m *MockAccountStorage) InsertNewAccount(account domain.Account) (*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewAccount", account)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewAccount indicates an expected call of InsertNewAccount.
func (mr *MockAccountStorageMockRecorder) InsertNewAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewAccount", reflect.TypeOf((*MockAccountStorage)(nil).InsertNewAccount), account)
}

// InsertTransaction mocks base method.
func (m *MockAccountStorage) InsertTransaction(tr domain.Transaction) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", tr)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockAccountStorageMockRecorder) InsertTransaction(tr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockAccountStorage)(nil).InsertTransaction), tr)
}

// SubFromAccountBalance mocks base method.
func (m *MockAccountStorage) SubFromAccountBalance(tr domain.Transaction) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubFromAccountBalance", tr)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubFromAccountBalance indicates an expected call of SubFromAccountBalance.
func (mr *MockAccountStorageMockRecorder) SubFromAccountBalance(tr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubFromAccountBalance", reflect.TypeOf((*MockAccountStorage)(nil).SubFromAccountBalance), tr)
}
