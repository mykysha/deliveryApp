// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/consumerservice/consumerservice.go

// Package mock_consumerservice is a generated GoMock package.
package mock_consumerservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/nndergunov/deliveryApp/app/services/consumer/pkg/domain"
)

// MockConsumerService is a mock of ConsumerService interface.
type MockConsumerService struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerServiceMockRecorder
}

// MockConsumerServiceMockRecorder is the mock recorder for MockConsumerService.
type MockConsumerServiceMockRecorder struct {
	mock *MockConsumerService
}

// NewMockConsumerService creates a new mock instance.
func NewMockConsumerService(ctrl *gomock.Controller) *MockConsumerService {
	mock := &MockConsumerService{ctrl: ctrl}
	mock.recorder = &MockConsumerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerService) EXPECT() *MockConsumerServiceMockRecorder {
	return m.recorder
}

// DeleteConsumer mocks base method.
func (m *MockConsumerService) DeleteConsumer(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConsumer", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConsumer indicates an expected call of DeleteConsumer.
func (mr *MockConsumerServiceMockRecorder) DeleteConsumer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConsumer", reflect.TypeOf((*MockConsumerService)(nil).DeleteConsumer), id)
}

// GetAllConsumer mocks base method.
func (m *MockConsumerService) GetAllConsumer() ([]domain.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllConsumer")
	ret0, _ := ret[0].([]domain.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllConsumer indicates an expected call of GetAllConsumer.
func (mr *MockConsumerServiceMockRecorder) GetAllConsumer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllConsumer", reflect.TypeOf((*MockConsumerService)(nil).GetAllConsumer))
}

// GetConsumer mocks base method.
func (m *MockConsumerService) GetConsumer(id string) (*domain.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumer", id)
	ret0, _ := ret[0].(*domain.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumer indicates an expected call of GetConsumer.
func (mr *MockConsumerServiceMockRecorder) GetConsumer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumer", reflect.TypeOf((*MockConsumerService)(nil).GetConsumer), id)
}

// GetLocation mocks base method.
func (m *MockConsumerService) GetLocation(id string) (*domain.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", id)
	ret0, _ := ret[0].(*domain.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockConsumerServiceMockRecorder) GetLocation(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockConsumerService)(nil).GetLocation), id)
}

// InsertConsumer mocks base method.
func (m *MockConsumerService) InsertConsumer(consumer domain.Consumer) (*domain.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertConsumer", consumer)
	ret0, _ := ret[0].(*domain.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertConsumer indicates an expected call of InsertConsumer.
func (mr *MockConsumerServiceMockRecorder) InsertConsumer(consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertConsumer", reflect.TypeOf((*MockConsumerService)(nil).InsertConsumer), consumer)
}

// InsertLocation mocks base method.
func (m *MockConsumerService) InsertLocation(location domain.Location, id string) (*domain.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLocation", location, id)
	ret0, _ := ret[0].(*domain.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLocation indicates an expected call of InsertLocation.
func (mr *MockConsumerServiceMockRecorder) InsertLocation(location, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLocation", reflect.TypeOf((*MockConsumerService)(nil).InsertLocation), location, id)
}

// UpdateConsumer mocks base method.
func (m *MockConsumerService) UpdateConsumer(consumer domain.Consumer, id string) (*domain.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConsumer", consumer, id)
	ret0, _ := ret[0].(*domain.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConsumer indicates an expected call of UpdateConsumer.
func (mr *MockConsumerServiceMockRecorder) UpdateConsumer(consumer, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConsumer", reflect.TypeOf((*MockConsumerService)(nil).UpdateConsumer), consumer, id)
}

// UpdateLocation mocks base method.
func (m *MockConsumerService) UpdateLocation(location domain.Location, id string) (*domain.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocation", location, id)
	ret0, _ := ret[0].(*domain.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocation indicates an expected call of UpdateLocation.
func (mr *MockConsumerServiceMockRecorder) UpdateLocation(location, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockConsumerService)(nil).UpdateLocation), location, id)
}
