// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/deliveryservice/deliveryservice.go

// Package mock_deliveryservice is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/nndergunov/deliveryApp/app/services/delivery/pkg/domain"
)

// MockDeliveryService is a mock of DeliveryService interface.
type MockDeliveryService struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryServiceMockRecorder
}

// MockDeliveryServiceMockRecorder is the mock recorder for MockDeliveryService.
type MockDeliveryServiceMockRecorder struct {
	mock *MockDeliveryService
}

// NewMockDeliveryService creates a new mock instance.
func NewMockDeliveryService(ctrl *gomock.Controller) *MockDeliveryService {
	mock := &MockDeliveryService{ctrl: ctrl}
	mock.recorder = &MockDeliveryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryService) EXPECT() *MockDeliveryServiceMockRecorder {
	return m.recorder
}

// AssignOrder mocks base method.
func (m *MockDeliveryService) AssignOrder(orderID string, order *domain.Order) (*domain.AssignOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignOrder", orderID, order)
	ret0, _ := ret[0].(*domain.AssignOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignOrder indicates an expected call of AssignOrder.
func (mr *MockDeliveryServiceMockRecorder) AssignOrder(orderID, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignOrder", reflect.TypeOf((*MockDeliveryService)(nil).AssignOrder), orderID, order)
}

// GetEstimateDelivery mocks base method.
func (m *MockDeliveryService) GetEstimateDelivery(consumerID, restaurantID string) (*domain.EstimateDeliveryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstimateDelivery", consumerID, restaurantID)
	ret0, _ := ret[0].(*domain.EstimateDeliveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEstimateDelivery indicates an expected call of GetEstimateDelivery.
func (mr *MockDeliveryServiceMockRecorder) GetEstimateDelivery(consumerID, restaurantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstimateDelivery", reflect.TypeOf((*MockDeliveryService)(nil).GetEstimateDelivery), consumerID, restaurantID)
}
