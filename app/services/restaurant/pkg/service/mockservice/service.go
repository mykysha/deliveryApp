// Code generated by mockery v2.13.1. DO NOT EDIT.

package mockservice

import (
	domain "github.com/nndergunov/deliveryApp/app/services/restaurant/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// AppService is an autogenerated mock type for the AppService type
type AppService struct {
	mock.Mock
}

// AddMenuItem provides a mock function with given fields: restaurantID, menuItem
func (_m *AppService) AddMenuItem(restaurantID int, menuItem domain.MenuItem) (*domain.MenuItem, error) {
	ret := _m.Called(restaurantID, menuItem)

	var r0 *domain.MenuItem
	if rf, ok := ret.Get(0).(func(int, domain.MenuItem) *domain.MenuItem); ok {
		r0 = rf(restaurantID, menuItem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MenuItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.MenuItem) error); ok {
		r1 = rf(restaurantID, menuItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMenu provides a mock function with given fields: menu
func (_m *AppService) CreateMenu(menu domain.Menu) (*domain.Menu, error) {
	ret := _m.Called(menu)

	var r0 *domain.Menu
	if rf, ok := ret.Get(0).(func(domain.Menu) *domain.Menu); ok {
		r0 = rf(menu)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Menu)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Menu) error); ok {
		r1 = rf(menu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNewRestaurant provides a mock function with given fields: restaurant
func (_m *AppService) CreateNewRestaurant(restaurant domain.Restaurant) (*domain.Restaurant, error) {
	ret := _m.Called(restaurant)

	var r0 *domain.Restaurant
	if rf, ok := ret.Get(0).(func(domain.Restaurant) *domain.Restaurant); ok {
		r0 = rf(restaurant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Restaurant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Restaurant) error); ok {
		r1 = rf(restaurant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMenuItem provides a mock function with given fields: restaurantID, menuItemID
func (_m *AppService) DeleteMenuItem(restaurantID int, menuItemID int) error {
	ret := _m.Called(restaurantID, menuItemID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(restaurantID, menuItemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRestaurant provides a mock function with given fields: restaurantID
func (_m *AppService) DeleteRestaurant(restaurantID int) error {
	ret := _m.Called(restaurantID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(restaurantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReturnAllRestaurants provides a mock function with given fields:
func (_m *AppService) ReturnAllRestaurants() ([]domain.Restaurant, error) {
	ret := _m.Called()

	var r0 []domain.Restaurant
	if rf, ok := ret.Get(0).(func() []domain.Restaurant); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Restaurant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReturnMenu provides a mock function with given fields: restaurantID
func (_m *AppService) ReturnMenu(restaurantID int) (*domain.Menu, error) {
	ret := _m.Called(restaurantID)

	var r0 *domain.Menu
	if rf, ok := ret.Get(0).(func(int) *domain.Menu); ok {
		r0 = rf(restaurantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Menu)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(restaurantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReturnRestaurant provides a mock function with given fields: restaurantID
func (_m *AppService) ReturnRestaurant(restaurantID int) (*domain.Restaurant, error) {
	ret := _m.Called(restaurantID)

	var r0 *domain.Restaurant
	if rf, ok := ret.Get(0).(func(int) *domain.Restaurant); ok {
		r0 = rf(restaurantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Restaurant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(restaurantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMenuItem provides a mock function with given fields: restaurantID, menuItem
func (_m *AppService) UpdateMenuItem(restaurantID int, menuItem domain.MenuItem) (*domain.MenuItem, error) {
	ret := _m.Called(restaurantID, menuItem)

	var r0 *domain.MenuItem
	if rf, ok := ret.Get(0).(func(int, domain.MenuItem) *domain.MenuItem); ok {
		r0 = rf(restaurantID, menuItem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MenuItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.MenuItem) error); ok {
		r1 = rf(restaurantID, menuItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRestaurant provides a mock function with given fields: restaurant
func (_m *AppService) UpdateRestaurant(restaurant domain.Restaurant) (*domain.Restaurant, error) {
	ret := _m.Called(restaurant)

	var r0 *domain.Restaurant
	if rf, ok := ret.Get(0).(func(domain.Restaurant) *domain.Restaurant); ok {
		r0 = rf(restaurant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Restaurant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Restaurant) error); ok {
		r1 = rf(restaurant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAppService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAppService creates a new instance of AppService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAppService(t mockConstructorTestingTNewAppService) *AppService {
	mock := &AppService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
