// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/courierservice/storage.go

// Package mock_courierservice is a generated GoMock package.
package mock_courierservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/nndergunov/deliveryApp/app/services/courier/pkg/domain"
)

// MockCourierStorage is a mock of CourierStorage interface.
type MockCourierStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCourierStorageMockRecorder
}

// MockCourierStorageMockRecorder is the mock recorder for MockCourierStorage.
type MockCourierStorageMockRecorder struct {
	mock *MockCourierStorage
}

// NewMockCourierStorage creates a new mock instance.
func NewMockCourierStorage(ctrl *gomock.Controller) *MockCourierStorage {
	mock := &MockCourierStorage{ctrl: ctrl}
	mock.recorder = &MockCourierStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourierStorage) EXPECT() *MockCourierStorageMockRecorder {
	return m.recorder
}

// CleanCourierTable mocks base method.
func (m *MockCourierStorage) CleanCourierTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanCourierTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanCourierTable indicates an expected call of CleanCourierTable.
func (mr *MockCourierStorageMockRecorder) CleanCourierTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanCourierTable", reflect.TypeOf((*MockCourierStorage)(nil).CleanCourierTable))
}

// CleanLocationTable mocks base method.
func (m *MockCourierStorage) CleanLocationTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanLocationTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanLocationTable indicates an expected call of CleanLocationTable.
func (mr *MockCourierStorageMockRecorder) CleanLocationTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanLocationTable", reflect.TypeOf((*MockCourierStorage)(nil).CleanLocationTable))
}

// DeleteCourier mocks base method.
func (m *MockCourierStorage) DeleteCourier(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourier", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourier indicates an expected call of DeleteCourier.
func (mr *MockCourierStorageMockRecorder) DeleteCourier(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourier", reflect.TypeOf((*MockCourierStorage)(nil).DeleteCourier), id)
}

// DeleteLocation mocks base method.
func (m *MockCourierStorage) DeleteLocation(courierID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocation", courierID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLocation indicates an expected call of DeleteLocation.
func (mr *MockCourierStorageMockRecorder) DeleteLocation(courierID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocation", reflect.TypeOf((*MockCourierStorage)(nil).DeleteLocation), courierID)
}

// GetCourierByID mocks base method.
func (m *MockCourierStorage) GetCourierByID(id int) (*domain.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourierByID", id)
	ret0, _ := ret[0].(*domain.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourierByID indicates an expected call of GetCourierByID.
func (mr *MockCourierStorageMockRecorder) GetCourierByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourierByID", reflect.TypeOf((*MockCourierStorage)(nil).GetCourierByID), id)
}

// GetCourierDuplicateByParam mocks base method.
func (m *MockCourierStorage) GetCourierDuplicateByParam(param domain.SearchParam) (*domain.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourierDuplicateByParam", param)
	ret0, _ := ret[0].(*domain.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourierDuplicateByParam indicates an expected call of GetCourierDuplicateByParam.
func (mr *MockCourierStorageMockRecorder) GetCourierDuplicateByParam(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourierDuplicateByParam", reflect.TypeOf((*MockCourierStorage)(nil).GetCourierDuplicateByParam), param)
}

// GetCourierList mocks base method.
func (m *MockCourierStorage) GetCourierList(param domain.SearchParam) ([]domain.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourierList", param)
	ret0, _ := ret[0].([]domain.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourierList indicates an expected call of GetCourierList.
func (mr *MockCourierStorageMockRecorder) GetCourierList(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourierList", reflect.TypeOf((*MockCourierStorage)(nil).GetCourierList), param)
}

// GetLocation mocks base method.
func (m *MockCourierStorage) GetLocation(userID int) (*domain.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", userID)
	ret0, _ := ret[0].(*domain.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockCourierStorageMockRecorder) GetLocation(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockCourierStorage)(nil).GetLocation), userID)
}

// GetLocationList mocks base method.
func (m *MockCourierStorage) GetLocationList(param domain.SearchParam) ([]domain.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationList", param)
	ret0, _ := ret[0].([]domain.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationList indicates an expected call of GetLocationList.
func (mr *MockCourierStorageMockRecorder) GetLocationList(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationList", reflect.TypeOf((*MockCourierStorage)(nil).GetLocationList), param)
}

// InsertCourier mocks base method.
func (m *MockCourierStorage) InsertCourier(courier domain.Courier) (*domain.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCourier", courier)
	ret0, _ := ret[0].(*domain.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCourier indicates an expected call of InsertCourier.
func (mr *MockCourierStorageMockRecorder) InsertCourier(courier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCourier", reflect.TypeOf((*MockCourierStorage)(nil).InsertCourier), courier)
}

// InsertLocation mocks base method.
func (m *MockCourierStorage) InsertLocation(courier domain.Location) (*domain.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLocation", courier)
	ret0, _ := ret[0].(*domain.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLocation indicates an expected call of InsertLocation.
func (mr *MockCourierStorageMockRecorder) InsertLocation(courier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLocation", reflect.TypeOf((*MockCourierStorage)(nil).InsertLocation), courier)
}

// UpdateCourier mocks base method.
func (m *MockCourierStorage) UpdateCourier(courier domain.Courier) (*domain.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourier", courier)
	ret0, _ := ret[0].(*domain.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourier indicates an expected call of UpdateCourier.
func (mr *MockCourierStorageMockRecorder) UpdateCourier(courier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourier", reflect.TypeOf((*MockCourierStorage)(nil).UpdateCourier), courier)
}

// UpdateCourierAvailable mocks base method.
func (m *MockCourierStorage) UpdateCourierAvailable(id int, available bool) (*domain.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourierAvailable", id, available)
	ret0, _ := ret[0].(*domain.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourierAvailable indicates an expected call of UpdateCourierAvailable.
func (mr *MockCourierStorageMockRecorder) UpdateCourierAvailable(id, available interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourierAvailable", reflect.TypeOf((*MockCourierStorage)(nil).UpdateCourierAvailable), id, available)
}

// UpdateLocation mocks base method.
func (m *MockCourierStorage) UpdateLocation(courier domain.Location) (*domain.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocation", courier)
	ret0, _ := ret[0].(*domain.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocation indicates an expected call of UpdateLocation.
func (mr *MockCourierStorageMockRecorder) UpdateLocation(courier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockCourierStorage)(nil).UpdateLocation), courier)
}
