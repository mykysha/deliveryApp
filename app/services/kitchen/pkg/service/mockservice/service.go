// Code generated by mockery v2.13.1. DO NOT EDIT.

package mockservice

import (
	domain "github.com/nndergunov/deliveryApp/app/services/kitchen/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// AppService is an autogenerated mock type for the AppService type
type AppService struct {
	mock.Mock
}

// GetTasks provides a mock function with given fields: kitchenID
func (_m *AppService) GetTasks(kitchenID int) (domain.Tasks, error) {
	ret := _m.Called(kitchenID)

	var r0 domain.Tasks
	if rf, ok := ret.Get(0).(func(int) domain.Tasks); ok {
		r0 = rf(kitchenID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Tasks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(kitchenID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAppService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAppService creates a new instance of AppService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAppService(t mockConstructorTestingTNewAppService) *AppService {
	mock := &AppService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
